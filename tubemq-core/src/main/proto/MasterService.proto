/*
 * Tencent is pleased to support the open source community by making TubeMQ available.
 *
 * Copyright (C) 2012-2019 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */

option java_package = "com.tencent.tubemq.corebase.protobuf.generated";
option java_outer_classname = "ClientMaster";
option java_generate_equals_and_hash = true;
option java_generic_services = true;
option optimize_for = SPEED;


message EventProto{
	optional int64 rebalanceId = 1;
    optional int32 opType = 2;
    optional int32 status = 3;
    /* consumerId@group-brokerId:host:port-topic:partitionId */
    repeated string subscribeInfo = 4;
}

message EnableBrokerFunInfo {
    required bool enableConsumeAuthenticate = 1;
    required bool enableConsumeAuthorize = 2;
    required bool enableProduceAuthenticate = 3;
    required bool enableProduceAuthorize = 4;
}

message AuthenticateInfo {
    required string userName = 1;
    required int64 timestamp = 2;
    required int32 nonce = 3;
    required string othParams = 4;
    required string signature = 5;
}

message MasterCertificateInfo {
    optional AuthenticateInfo authInfo = 1;
    optional string authorizedToken = 2;
}

message MasterAuthorizedInfo {
    required int64 visitAuthorizedToken = 1;
    optional string authAuthorizedToken = 2;
}

message RegisterRequestP2M {
    required string clientId = 1;
    repeated string topicList = 2;
    required int64 brokerCheckSum = 3;
    required string hostName = 4;
    optional MasterCertificateInfo authInfo = 5;
}

message RegisterResponseM2P {
    required bool success = 1;
    required int32 errCode = 2;
    required string errMsg = 3;
    required int64 brokerCheckSum = 4;
    repeated string brokerInfos = 5;
    optional MasterAuthorizedInfo authorizedInfo = 6;
}

message HeartRequestP2M {
    required string clientId = 1;
    required int64 brokerCheckSum = 2;
    required string hostName = 3;
    repeated string topicList = 4;
    optional MasterCertificateInfo authInfo = 5;
}

message HeartResponseM2P {
    required bool success = 1;
    required int32 errCode = 2;
    required string errMsg = 3;
    required int64 brokerCheckSum = 4;
    /* brokerId:host:port-topic:partitionNum */
    repeated string topicInfos = 5;
    repeated string brokerInfos = 6;
    optional bool requireAuth = 7;
    optional MasterAuthorizedInfo authorizedInfo = 8;
}

message CloseRequestP2M{
	required string clientId = 1;
	optional MasterCertificateInfo authInfo = 2;
}

message CloseResponseM2P{
    required bool success = 1;
    required int32 errCode = 2;
    required string errMsg = 3;
}

message RegisterRequestC2M {
    required string clientId = 1;
    required string groupName = 2;
    required string hostName = 3;
    repeated string topicList = 4;
    /* consumerId@group-brokerId:host:port-topic:partitionId */
    repeated string subscribeInfo = 5;
    repeated string  topicCondition = 6;
    optional bool requireBound = 7;
    optional int64   sessionTime = 8;
    optional string  sessionKey = 9;
    optional int32   totalCount = 10;
    optional string  requiredPartition = 11;
    optional bool notAllocated = 12;
    optional bool selectBig = 13;
    optional int64 groupFlowCheckId = 14;
    optional int64 defFlowCheckId = 15;
    optional int64 ssdStoreId = 16;
    optional int32 qryPriorityId = 17;
    optional MasterCertificateInfo authInfo = 18;
}

message RegisterResponseM2C {
    required bool success = 1;
    required int32 errCode = 2;
    required string errMsg = 3;
    /* brokerId:host:port-topic:partitionNum */
    repeated string topicInfo = 4;
    optional bool notAllocated = 5;
    optional int64 defFlowCheckId = 6;
    optional string defFlowControlInfo = 7;
    optional int64 groupFlowCheckId = 8;
    optional string groupFlowControlInfo = 9;
    optional int64 ssdStoreId = 10;
    optional int32 qryPriorityId = 11;
    optional MasterAuthorizedInfo authorizedInfo = 12;
}

message HeartRequestC2M {
    required string clientId = 1;
    required string groupName = 2;
    repeated string subscribeInfo = 3;
    required bool reportSubscribeInfo = 4;
    optional EventProto event = 5;
    optional int64 defFlowCheckId = 6;
    optional int64 groupFlowCheckId = 7;
    optional int64 ssdStoreId = 8;
    optional int32 qryPriorityId = 9;
    optional MasterCertificateInfo authInfo = 10;
}

message HeartResponseM2C {
    required bool success = 1;
    required int32 errCode = 2;
    required string errMsg = 3;
    optional EventProto event =4;
    optional bool notAllocated = 5;
    optional int64 defFlowCheckId = 6;
    optional string defFlowControlInfo = 7;
    optional int64 groupFlowCheckId = 8;
    optional string groupFlowControlInfo = 9;
    optional int64 ssdStoreId = 10;
    optional int32 qryPriorityId = 11;
    optional bool requireAuth = 12;
    optional MasterAuthorizedInfo authorizedInfo = 13;
}

message CloseRequestC2M {
    required string clientId = 1;
    required string groupName = 2;
	optional MasterCertificateInfo authInfo = 3;
}

message CloseResponseM2C {
    required bool success = 1;
    required int32 errCode = 2;
    required string errMsg = 3;
}


message RegisterRequestB2M {
    required string clientId = 1;
    required bool brokerOnline = 2;
    required bool enableTls = 3;
    required int32 readStatusRpt = 4;
    required int32 writeStatusRpt = 5;
    required int64 curBrokerConfId = 6;
    required int32 confCheckSumId = 7;
    /* defaultPartNum:acceptPublish:acceptSubscribe:unflushThreshold:unflushInterval:deleteWhen:deletePolicy */
    required string brokerDefaultConfInfo = 8;
    /* topic:partNum:acceptPublish:acceptSubscribe:unflushThreshold:unflushInterval:deleteWhen:deletePolicy:filterStatusId:statusId:attributes */
    repeated string brokerTopicSetConfInfo = 9;
    optional int64 ssdStoreId = 10;
    optional int64 flowCheckId = 11;
    optional int32 qryPriorityId = 12;
    optional int32 tlsPort = 13;
    optional MasterCertificateInfo authInfo = 14;
}

message RegisterResponseM2B {
    required bool success = 1;
    required int32 errCode = 2;
    required string errMsg = 3;
    required bool stopRead = 4;
    required bool stopWrite = 5;
    required bool takeConfInfo = 6;
    optional EnableBrokerFunInfo enableBrokerInfo = 7;
    optional int64 curBrokerConfId = 8;
    optional int32 confCheckSumId = 9;
    /* defaultPartNum:acceptPublish:acceptSubscribe:unflushThreshold:unflushInterval:deleteWhen:deletePolicy */
    optional string brokerDefaultConfInfo = 10;
    /* topic:partNum:acceptPublish:acceptSubscribe:unflushThreshold:unflushInterval:deleteWhen:deletePolicy:filterStatusId:statusId:attributes */
    repeated string brokerTopicSetConfInfo = 11;
    optional int64 ssdStoreId = 12;
    optional int64 flowCheckId = 13;
    optional string flowControlInfo = 14;
    optional int32 qryPriorityId = 15;
    optional MasterAuthorizedInfo authorizedInfo = 16;
}

message HeartRequestB2M {
    required string brokerId = 1;
    required bool brokerOnline = 2;
    required int32 readStatusRpt = 3;
    required int32 writeStatusRpt = 4;
    required int64 curBrokerConfId = 5;
    required int32 confCheckSumId = 6;
    required bool takeConfInfo = 7;
    required bool takeRemovedTopicInfo = 8;
    /* defaultPartNum:acceptPublish:acceptSubscribe:unflushThreshold:unflushInterval:deleteWhen:deletePolicy */
    optional string brokerDefaultConfInfo = 9;
    /* topic:partNum:acceptPublish:acceptSubscribe:unflushThreshold:unflushInterval:deleteWhen:deletePolicy:filterStatusId:statusId:attributes */
    repeated string brokerTopicSetConfInfo = 10;
    repeated string removedTopicsInfo = 11;
    optional int64 ssdStoreId = 12;
    optional int64 flowCheckId = 13;
    optional int32 qryPriorityId = 14;
    optional MasterCertificateInfo authInfo = 15;
}

message HeartResponseM2B {
    required bool success = 1;
    required int32 errCode = 2;
    required string errMsg = 3;
    required bool stopRead = 4;
    required bool stopWrite = 5;
    required int64 curBrokerConfId = 6;
    required int32 confCheckSumId = 7;
    required bool needReportData = 8;
    required bool takeConfInfo = 9;
    required bool takeRemoveTopicInfo = 10;
    /* defaultPartNum:acceptPublish:acceptSubscribe:unflushThreshold:unflushInterval:deleteWhen:deletePolicy */
    optional string brokerDefaultConfInfo = 11;
    /* topic:partNum:acceptPublish:acceptSubscribe:unflushThreshold:unflushInterval:deleteWhen:deletePolicy:filterStatusId:statusId:attributes */
    repeated string brokerTopicSetConfInfo = 12;
    /* topic:partNum:acceptPublish:acceptSubscribe:unflushThreshold:unflushInterval:deleteWhen:deletePolicy:filterStatusId:statusId:attributes */
    repeated string removeTopicConfInfo = 13;
    optional int64 ssdStoreId = 14;
    optional int64 flowCheckId = 15;
    optional string flowControlInfo = 16;
    optional int32 qryPriorityId = 17;
    optional MasterAuthorizedInfo authorizedInfo = 18;
}

message CloseRequestB2M {
	required string brokerId = 1;
	optional MasterCertificateInfo authInfo = 2;
}

message CloseResponseM2B {
    required bool success = 1;
    required int32 errCode = 2;
    required string errMsg = 3;
}

