/*
 * Tencent is pleased to support the open source community by making TubeMQ available.
 *
 * Copyright (C) 2012-2019 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */

option java_package = "com.tencent.tubemq.corebase.protobuf.generated";
option java_outer_classname = "ClientBroker";
option java_generate_equals_and_hash = true;
option java_generic_services = true;
option optimize_for = SPEED;


message TransferedMessage {
    required int64 messageId = 1;
    required int32 checkSum = 2;
    required bytes payLoadData = 3;
    required int32 flag = 4;
}

message AuthorizedInfo {
    required int64 visitAuthorizedToken = 1;
    optional string authAuthorizedToken = 2;
}

message SendMessageRequestP2B {
    required string clientId = 1;
    required string topicName = 2;
    required int32 partitionId = 3;
    required bytes data = 4;
    required int32 flag = 5;
    required int32 checkSum = 6;
    required int32 sentAddr = 7;
    optional string msgType = 8;
    optional string msgTime = 9;
    optional AuthorizedInfo authInfo = 10;
}

message SendMessageResponseB2P {
    required bool success = 1;
    required int32 errCode = 2;
    required string errMsg = 3;
    optional bool requireAuth = 4;
}

message RegisterRequestC2B {
    required int32 opType = 1;
    required string clientId = 2;
    required string groupName = 3;
    required string topicName = 4;
    required int32 partitionId = 5;
    required int32 readStatus = 6;
    repeated string filterCondStr = 7;
    optional int64 currOffset = 8;
    optional string sessionKey = 9;
    optional int64 sessionTime = 10;
    optional int64 ssdStoreId = 11;
    optional int32 qryPriorityId = 12;
    optional AuthorizedInfo authInfo = 13;
}

message RegisterResponseB2C {
    required bool success = 1;
    required int32 errCode = 2;
    required string errMsg = 3;
    optional int64 currOffset = 4;
}

message HeartBeatRequestC2B {
    required string clientId = 1;
    required string groupName = 2;
    required int32 readStatus = 3;
    /* brokerId:host:port:topic:partitionId:delayTimeStamp */
    repeated string partitionInfo = 4;
    optional int64 ssdStoreId = 5;
    optional int32 qryPriorityId = 6;
    optional AuthorizedInfo authInfo = 7;
}

message HeartBeatResponseB2C {
    required bool success = 1;
    required int32 errCode = 2;
    required string errMsg = 3;
    optional bool hasPartFailure = 4;
    /* failCode:brokerId:host:port:topic:partitionId:delayTimeStamp */
    repeated string failureInfo = 5;
    optional bool requireAuth = 6;
}

message GetMessageRequestC2B {
    required string clientId = 1;
    required int32 partitionId = 2;
    required string groupName = 3;
    required string topicName = 4;
    optional bool lastPackConsumed = 5;
    optional bool manualCommitOffset = 6;
    optional bool escFlowCtrl = 7;
}

message GetMessageResponseB2C {
    required bool success = 1;
    required int32 errCode = 2;
    optional string errMsg = 3;
    repeated TransferedMessage messages = 4;
    optional int64 currOffset = 5;
    optional int32 minLimitTime = 6;
    optional bool escFlowCtrl = 7;
    optional int64 currDataDlt = 8;
    optional bool requireSlow = 9;
}

message CommitOffsetRequestC2B {
    required string clientId = 1;
    required string topicName = 2;
    required int32 partitionId = 3;
    required string groupName = 4;
    optional bool lastPackConsumed = 5;
}

message CommitOffsetResponseB2C {
    required bool success = 1;
    required int32 errCode = 2;
    required string errMsg = 3;
    optional int64 currOffset=4;
}
